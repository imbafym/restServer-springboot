package com.yiming.restServer.controller;

import com.yiming.restServer.dto.UserDTO;
import com.yiming.restServer.model.User;
import com.yiming.restServer.repository.UserRepository;
import com.yiming.restServer.service.UserService;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;
import java.util.stream.Collector;
import java.util.stream.Collectors;


@CrossOrigin(origins = "*")
@RestController
@RequestMapping(path = "/users") // This means URL's start with /user (after Application path)
public class UserController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @Autowired
    private UserService userService;

    @Autowired
    private ModelMapper modelMapper;

    @PostMapping("/authenticate")
    public ResponseEntity<?> authenticate(@RequestBody UserDTO userDTO) {
        User user = userService.anthenticate(userDTO.getUsername(), userDTO.getPassword());
        if (user == null) {
            return ResponseEntity
                    .status(HttpStatus.UNAUTHORIZED)
                    .body("Please enter the correct username and password!");
        }
        return ResponseEntity
                .ok()
                .body(convertEntityToDto(user));
    }

    @PostMapping("/register")
    public ResponseEntity<?> registerUser(@RequestBody UserDTO userDTO) {
        try {
            User user = userService.save(converDtoToEntity(userDTO));
            return ResponseEntity
                    .ok()
                    .body(convertEntityToDto(user));
        } catch (DataIntegrityViolationException e) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("user already exists");
        } catch (Exception e) {
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body("Register Failed");
        }
    }

    @GetMapping("/getAll")
    public ResponseEntity<?> getAll() {
        try {
            List<User> users = userService.getAll();
            return ResponseEntity
                    .ok()
                    .body(users
                            .stream()
                            .map(this::convertEntityToDto)
                            .collect(Collectors.toList())
                    );
        }catch (Exception e){
            return ResponseEntity
                    .status(HttpStatus.BAD_REQUEST)
                    .body(e.getMessage());
        }
    }


    @PutMapping("/update")
    public ResponseEntity<?> update(UserDTO userDTO){
        try{
            User user = userService.update(converDtoToEntity(userDTO));
            return ResponseEntity.ok().body(convertEntityToDto(user));
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }

    @DeleteMapping("/delete/{id}")
    public ResponseEntity<?> delete(@PathVariable("id") Integer id){
        try{
            userService.delete(id);
            return ResponseEntity.ok().body("Delete successfully");
        }catch (Exception e){
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        }
    }


    private UserDTO convertEntityToDto(User user) {
        UserDTO userDTO = modelMapper.map(user, UserDTO.class);
        userDTO.setToken(UUID.randomUUID().toString());
        return userDTO;
    }

    private User converDtoToEntity(UserDTO userDTO) {
        return modelMapper.map(userDTO, User.class);
    }

}
